test_tree.printlevelOrder(key_printer) = 
current level = 1
  7

current level = 2
  1
 30

current level = 3
  0
  3
  8
 50

current level = 4
-10
  2
  5
 20
 40
 60

current level = 5
-20
 -5
  4
  6
  9
 55
 65

current level = 6
 54
test_tree.inOrderTraverse(key_printer) = -20
-10
 -5
  0
  1
  2
  3
  4
  5
  6
  7
  8
  9
 20
 30
 40
 50
 54
 55
 60
 65

test_tree.preOrderTraverse(key_printer) =   7
  1
  0
-10
-20
 -5
  3
  2
  5
  4
  6
 30
  8
 20
  9
 50
 40
 60
 55
 54
 65

test_tree.preOrderIterative(key_printer) = 
7 is top of stack. Stack after pop() = []
Stack after pushing children of 7 = [1, 30, ]
1 is top of stack. Stack after pop() = [30, ]
Stack after pushing children of 1 = [0, 3, 30, ]
0 is top of stack. Stack after pop() = [3, 30, ]
Stack after pushing children of 0 = [-10, 3, 30, ]
-10 is top of stack. Stack after pop() = [3, 30, ]
Stack after pushing children of -10 = [-20, -5, 3, 30, ]
-20 is top of stack. Stack after pop() = [-5, 3, 30, ]
Stack after pushing children of -20 = [-5, 3, 30, ]
-5 is top of stack. Stack after pop() = [3, 30, ]
Stack after pushing children of -5 = [3, 30, ]
3 is top of stack. Stack after pop() = [30, ]
Stack after pushing children of 3 = [2, 5, 30, ]
2 is top of stack. Stack after pop() = [5, 30, ]
Stack after pushing children of 2 = [5, 30, ]
5 is top of stack. Stack after pop() = [30, ]
Stack after pushing children of 5 = [4, 6, 30, ]
4 is top of stack. Stack after pop() = [6, 30, ]
Stack after pushing children of 4 = [6, 30, ]
6 is top of stack. Stack after pop() = [30, ]
Stack after pushing children of 6 = [30, ]
30 is top of stack. Stack after pop() = []
Stack after pushing children of 30 = [8, 50, ]
8 is top of stack. Stack after pop() = [50, ]
Stack after pushing children of 8 = [20, 50, ]
20 is top of stack. Stack after pop() = [50, ]
Stack after pushing children of 20 = [9, 50, ]
9 is top of stack. Stack after pop() = [50, ]
Stack after pushing children of 9 = [50, ]
50 is top of stack. Stack after pop() = []
Stack after pushing children of 50 = [40, 60, ]
40 is top of stack. Stack after pop() = [60, ]
Stack after pushing children of 40 = [60, ]
60 is top of stack. Stack after pop() = []
Stack after pushing children of 60 = [55, 65, ]
55 is top of stack. Stack after pop() = [65, ]
Stack after pushing children of 55 = [54, 65, ]
54 is top of stack. Stack after pop() = [65, ]
Stack after pushing children of 54 = [65, ]
65 is top of stack. Stack after pop() = []
Stack after pushing children of 65 = []

test_tree.postOrderIterative(key_printer) = -20
 -5
-10
  0
  2
  4
  6
  5
  3
  1
  9
 20
  8
 40
 54
 55
 65
 60
 50
 30
  7

